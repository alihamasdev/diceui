{
  "name": "checkbox-group-multi-selection-demo",
  "type": "registry:example",
  "dependencies": [
    "@diceui/checkbox-group",
    "lucide-react"
  ],
  "files": [
    {
      "path": "example/checkbox-group-multi-selection-demo.tsx",
      "content": "\"use client\";\r\n\r\nimport {\r\n  CheckboxGroup,\r\n  CheckboxGroupDescription,\r\n  CheckboxGroupItem,\r\n  CheckboxGroupLabel,\r\n  CheckboxGroupList,\r\n} from \"@/registry/default/ui/checkbox-group\";\r\nimport * as React from \"react\";\r\n\r\nconst tricks = [\r\n  { label: \"Kickflip\", value: \"kickflip\" },\r\n  { label: \"Heelflip\", value: \"heelflip\" },\r\n  { label: \"Tre Flip\", value: \"tre-flip\" },\r\n  { label: \"Pizza Guy\", value: \"pizza-guy\" },\r\n  { label: \"FS 540\", value: \"fs-540\" },\r\n  { label: \"The 900\", value: \"the-900\" },\r\n];\r\n\r\nexport default function CheckboxGroupMultiSelectionDemo() {\r\n  const { value, onValueChange, onShiftKeyDown } = useShiftMultiSelect({\r\n    items: tricks,\r\n    getItemValue: (item) => item.value,\r\n  });\r\n\r\n  return (\r\n    <CheckboxGroup value={value} onValueChange={onValueChange}>\r\n      <CheckboxGroupLabel>Tricks</CheckboxGroupLabel>\r\n      <CheckboxGroupDescription>\r\n        Hold Shift and click to select multiple items\r\n      </CheckboxGroupDescription>\r\n      <CheckboxGroupList\r\n        className=\"mt-1\"\r\n        onKeyDown={onShiftKeyDown}\r\n        onKeyUp={onShiftKeyDown}\r\n      >\r\n        {tricks.map((trick) => (\r\n          <CheckboxGroupItem key={trick.value} value={trick.value}>\r\n            {trick.label}\r\n          </CheckboxGroupItem>\r\n        ))}\r\n      </CheckboxGroupList>\r\n    </CheckboxGroup>\r\n  );\r\n}\r\n\r\ninterface UseShiftMultiSelectProps<T> {\r\n  /** The items for selection. */\r\n  items: T[];\r\n\r\n  /** The value of the item. */\r\n  getItemValue: (item: T) => string;\r\n}\r\n\r\nfunction useShiftMultiSelect<T>({\r\n  items,\r\n  getItemValue,\r\n}: UseShiftMultiSelectProps<T>) {\r\n  const [selectedValues, setSelectedValues] = React.useState<string[]>([]);\r\n  const [lastSelected, setLastSelected] = React.useState<number | null>(null);\r\n  const isShiftPressedRef = React.useRef(false);\r\n\r\n  const onShiftKeyDown = React.useCallback(\r\n    (event: React.KeyboardEvent<HTMLElement>) => {\r\n      if (event.key === \"Shift\") {\r\n        isShiftPressedRef.current = event.type === \"keydown\";\r\n      }\r\n    },\r\n    [],\r\n  );\r\n\r\n  const onValueChange = React.useCallback(\r\n    (newValue: string[]) => {\r\n      // Handle single selection\r\n      if (!isShiftPressedRef.current || lastSelected === null) {\r\n        setSelectedValues(newValue);\r\n        const clickedValue =\r\n          newValue.find((v) => !selectedValues.includes(v)) ??\r\n          selectedValues.find((v) => !newValue.includes(v));\r\n        if (clickedValue) {\r\n          const newIndex = items.findIndex(\r\n            (item) => getItemValue(item) === clickedValue,\r\n          );\r\n          if (newIndex !== -1) {\r\n            setLastSelected(newIndex);\r\n          }\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Find the currently clicked item\r\n      const clickedValue =\r\n        newValue.find((v) => !selectedValues.includes(v)) ??\r\n        selectedValues.find((v) => !newValue.includes(v));\r\n      if (!clickedValue) return;\r\n\r\n      const currentIndex = items.findIndex(\r\n        (item) => getItemValue(item) === clickedValue,\r\n      );\r\n      if (currentIndex === -1) return;\r\n\r\n      // Handle shift-click selection\r\n      const start = Math.min(lastSelected, currentIndex);\r\n      const end = Math.max(lastSelected, currentIndex);\r\n      const rangeValues = items\r\n        .slice(start, end + 1)\r\n        .map((item) => getItemValue(item));\r\n\r\n      const newSelectedValues = new Set(selectedValues);\r\n      const currentItem = items[currentIndex];\r\n      const isSelecting =\r\n        currentItem && !selectedValues.includes(getItemValue(currentItem));\r\n\r\n      for (const value of rangeValues) {\r\n        if (isSelecting) {\r\n          newSelectedValues.add(value);\r\n        } else {\r\n          newSelectedValues.delete(value);\r\n        }\r\n      }\r\n\r\n      setSelectedValues(Array.from(newSelectedValues));\r\n      setLastSelected(currentIndex);\r\n    },\r\n    [lastSelected, selectedValues, items, getItemValue],\r\n  );\r\n\r\n  return {\r\n    value: selectedValues,\r\n    onValueChange,\r\n    onShiftKeyDown,\r\n  };\r\n}\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}