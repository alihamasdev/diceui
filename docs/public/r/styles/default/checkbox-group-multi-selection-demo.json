{
  "name": "checkbox-group-multi-selection-demo",
  "type": "registry:example",
  "dependencies": [
    "@diceui/checkbox-group",
    "lucide-react"
  ],
  "files": [
    {
      "path": "example/checkbox-group-multi-selection-demo.tsx",
      "content": "import {\r\n  CheckboxGroup,\r\n  CheckboxGroupDescription,\r\n  CheckboxGroupItem,\r\n  CheckboxGroupLabel,\r\n  CheckboxGroupList,\r\n  CheckboxGroupMessage,\r\n} from \"@/registry/default/ui/checkbox-group\";\r\nimport { useCallback, useState } from \"react\";\r\n\r\nconst tricks = [\r\n  { label: \"Kickflip\", value: \"kickflip\" },\r\n  { label: \"Heelflip\", value: \"heelflip\" },\r\n  { label: \"Tre Flip\", value: \"tre-flip\" },\r\n  { label: \"FS 540\", value: \"fs-540\" },\r\n  { label: \"Casper flip 360 flip\", value: \"casper-flip-360-flip\" },\r\n  { label: \"Kickflip Backflip\", value: \"kickflip-backflip\" },\r\n  { label: \"360 Varial McTwist\", value: \"360-varial-mc-twist\" },\r\n  { label: \"The 900\", value: \"the-900\" },\r\n  { label: \"Indy Backflip\", value: \"indy-backflip\" },\r\n  { label: \"Pizza Guy\", value: \"pizza-guy\" },\r\n] as const;\r\n\r\nexport default function CheckboxGroupMultiSelectionDemo() {\r\n  const [selectedTricks, setSelectedTricks] = useState<string[]>([]);\r\n  const [lastSelected, setLastSelected] = useState<number | null>(null);\r\n\r\n  const handleItemClick = useCallback(\r\n    (event: React.MouseEvent, value: string, index: number) => {\r\n      if (event.shiftKey && lastSelected !== null) {\r\n        const start = Math.min(lastSelected, index);\r\n        const end = Math.max(lastSelected, index);\r\n        const newValues = tricks.slice(start, end + 1).map((t) => t.value);\r\n\r\n        setSelectedTricks((prev) => {\r\n          const existing = new Set(prev);\r\n          // If the last clicked item was selected, select all in range\r\n          // If it was deselected, deselect all in range\r\n          const shouldSelect = existing.has(tricks[lastSelected]?.value ?? \"\");\r\n\r\n          for (const value of newValues) {\r\n            if (shouldSelect) {\r\n              existing.add(value);\r\n            } else {\r\n              existing.delete(value);\r\n            }\r\n          }\r\n\r\n          return Array.from(existing);\r\n        });\r\n      } else {\r\n        setSelectedTricks((prev) => {\r\n          const existing = new Set(prev);\r\n          if (existing.has(value)) {\r\n            existing.delete(value);\r\n          } else {\r\n            existing.add(value);\r\n          }\r\n          return Array.from(existing);\r\n        });\r\n      }\r\n      setLastSelected(index);\r\n    },\r\n    [lastSelected],\r\n  );\r\n\r\n  return (\r\n    <CheckboxGroup\r\n      value={selectedTricks}\r\n      onValueChange={setSelectedTricks}\r\n      className=\"w-full max-w-[400px] space-y-3\"\r\n    >\r\n      <CheckboxGroupLabel>Skateboarding Tricks</CheckboxGroupLabel>\r\n      <CheckboxGroupDescription>\r\n        Hold Shift and click to select multiple tricks\r\n      </CheckboxGroupDescription>\r\n\r\n      <CheckboxGroupList data-orientation=\"vertical\" className=\"space-y-2\">\r\n        {tricks.map((trick, index) => (\r\n          <CheckboxGroupItem\r\n            key={trick.value}\r\n            value={trick.value}\r\n            onClick={(e) => handleItemClick(e, trick.value, index)}\r\n            className=\"cursor-pointer select-none\"\r\n          >\r\n            {trick.label}\r\n          </CheckboxGroupItem>\r\n        ))}\r\n      </CheckboxGroupList>\r\n\r\n      <CheckboxGroupMessage>\r\n        {selectedTricks.length === 0\r\n          ? \"Select tricks to practice\"\r\n          : `Selected ${selectedTricks.length} trick${\r\n              selectedTricks.length === 1 ? \"\" : \"s\"\r\n            }`}\r\n      </CheckboxGroupMessage>\r\n    </CheckboxGroup>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}