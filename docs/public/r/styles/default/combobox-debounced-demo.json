{
  "name": "combobox-debounced-demo",
  "type": "registry:example",
  "dependencies": [
    "@diceui/combobox",
    "lucide-react"
  ],
  "registryDependencies": [
    "combobox"
  ],
  "files": [
    {
      "path": "example/combobox-debounced-demo.tsx",
      "content": "\"use client\";\r\n\r\nimport {\r\n  Combobox,\r\n  ComboboxAnchor,\r\n  ComboboxContent,\r\n  ComboboxEmpty,\r\n  ComboboxInput,\r\n  ComboboxItem,\r\n  ComboboxLabel,\r\n  ComboboxProgress,\r\n  ComboboxTrigger,\r\n} from \"@/registry/default/ui/combobox\";\r\nimport { ChevronDown } from \"lucide-react\";\r\nimport * as React from \"react\";\r\n\r\nconst tricks = [\r\n  { label: \"Kickflip\", value: \"kickflip\" },\r\n  { label: \"Heelflip\", value: \"heelflip\" },\r\n  { label: \"Tre Flip\", value: \"tre-flip\" },\r\n  { label: \"FS 540\", value: \"fs-540\" },\r\n  { label: \"Casper flip 360 flip\", value: \"casper-flip-360-flip\" },\r\n  { label: \"Kickflip Backflip\", value: \"kickflip-backflip\" },\r\n  { label: \"360 Varial McTwist\", value: \"360-varial-mc-twist\" },\r\n  { label: \"The 900\", value: \"the-900\" },\r\n];\r\n\r\nexport default function ComboboxDebouncedDemo() {\r\n  const [value, setValue] = React.useState(\"\");\r\n  const [search, setSearch] = React.useState(\"\");\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [progress, setProgress] = React.useState(0);\r\n  const [filteredItems, setFilteredItems] = React.useState(tricks);\r\n\r\n  // Debounce search with loading simulation\r\n  const debouncedSearch = React.useCallback(\r\n    debounce(async (searchTerm: string) => {\r\n      setIsLoading(true);\r\n      setProgress(0);\r\n\r\n      // Simulate a more realistic progress pattern\r\n      const progressSteps = [15, 35, 65, 85, 95] as const;\r\n      let currentStepIndex = 0;\r\n\r\n      const interval = setInterval(() => {\r\n        if (currentStepIndex < progressSteps.length) {\r\n          setProgress(progressSteps[currentStepIndex] ?? 0);\r\n          currentStepIndex++;\r\n        }\r\n      }, 150);\r\n\r\n      // Simulate API delay with variable timing\r\n      const delay = Math.random() * 300 + 400; // Random delay between 400-700ms\r\n      await new Promise((resolve) => setTimeout(resolve, delay));\r\n\r\n      const results = tricks.filter((trick) =>\r\n        trick.label.toLowerCase().includes(searchTerm.toLowerCase()),\r\n      );\r\n\r\n      setFilteredItems(results);\r\n      setProgress(100);\r\n      setIsLoading(false);\r\n      clearInterval(interval);\r\n    }, 300),\r\n    [],\r\n  );\r\n\r\n  const onInputValueChange = React.useCallback(\r\n    (value: string) => {\r\n      setSearch(value);\r\n      debouncedSearch(value);\r\n    },\r\n    [debouncedSearch],\r\n  );\r\n\r\n  return (\r\n    <Combobox\r\n      value={value}\r\n      onValueChange={setValue}\r\n      inputValue={search}\r\n      onInputValueChange={onInputValueChange}\r\n      manualFiltering\r\n    >\r\n      <ComboboxLabel>Trick</ComboboxLabel>\r\n      <ComboboxAnchor>\r\n        <ComboboxInput placeholder=\"Search trick...\" />\r\n        <ComboboxTrigger>\r\n          <ChevronDown className=\"h-4 w-4\" />\r\n        </ComboboxTrigger>\r\n      </ComboboxAnchor>\r\n      <ComboboxContent>\r\n        {isLoading ? (\r\n          <ComboboxProgress value={progress} label=\"Searching tricks...\" />\r\n        ) : null}\r\n        <ComboboxEmpty keepVisible={!isLoading && filteredItems.length === 0}>\r\n          No trick found.\r\n        </ComboboxEmpty>\r\n        {!isLoading &&\r\n          filteredItems.map((trick) => (\r\n            <ComboboxItem\r\n              key={trick.value}\r\n              value={trick.value}\r\n              indicatorSide=\"right\"\r\n            >\r\n              {trick.label}\r\n            </ComboboxItem>\r\n          ))}\r\n      </ComboboxContent>\r\n    </Combobox>\r\n  );\r\n}\r\n\r\nfunction debounce<TFunction extends (...args: never[]) => unknown>(\r\n  func: TFunction,\r\n  wait: number,\r\n): (...args: Parameters<TFunction>) => void {\r\n  let timeoutId: ReturnType<typeof setTimeout>;\r\n\r\n  return function (this: unknown, ...args: Parameters<TFunction>): void {\r\n    clearTimeout(timeoutId);\r\n    timeoutId = setTimeout(() => {\r\n      func.apply(this, args);\r\n    }, wait);\r\n  };\r\n}\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}