{
  "name": "combobox-virtualized-demo",
  "type": "registry:example",
  "dependencies": [
    "@diceui/combobox",
    "@tanstack/react-virtual",
    "lucide-react"
  ],
  "registryDependencies": [
    "combobox"
  ],
  "files": [
    {
      "path": "example/combobox-virtualized-demo.tsx",
      "content": "\"use client\";\r\n\r\nimport {\r\n  Combobox,\r\n  ComboboxAnchor,\r\n  ComboboxContent,\r\n  ComboboxEmpty,\r\n  ComboboxInput,\r\n  ComboboxItem,\r\n  ComboboxLabel,\r\n  ComboboxTrigger,\r\n} from \"@/registry/default/ui/combobox\";\r\nimport { useVirtualizer } from \"@tanstack/react-virtual\";\r\nimport { ChevronDown } from \"lucide-react\";\r\nimport * as React from \"react\";\r\nimport { useDeferredValue } from \"react\";\r\n\r\ninterface Option {\r\n  label: string;\r\n  value: string;\r\n}\r\n\r\nconst categories = [\r\n  \"Flip\",\r\n  \"Grind\",\r\n  \"Slide\",\r\n  \"Grab\",\r\n  \"Manual\",\r\n  \"Transition\",\r\n  \"Old School\",\r\n] as const;\r\n\r\nconst variations = [\r\n  \"Regular\",\r\n  \"Switch\",\r\n  \"Nollie\",\r\n  \"Fakie\",\r\n  \"360\",\r\n  \"Double\",\r\n  \"Late\",\r\n] as const;\r\n\r\ntype Category = (typeof categories)[number];\r\ntype Variation = (typeof variations)[number];\r\n\r\nconst generateItems = (count: number): Option[] => {\r\n  return Array.from({ length: count }, (_, i) => {\r\n    const category: Category = categories[i % categories.length] ?? \"Flip\";\r\n    const variation: Variation = variations[i % variations.length] ?? \"Regular\";\r\n    const trickNumber = Math.floor(i / categories.length) + 1;\r\n\r\n    return {\r\n      label: `${variation} ${category} ${trickNumber}`,\r\n      value: `trick-${i + 1}`,\r\n    };\r\n  });\r\n};\r\n\r\nconst items = generateItems(10000);\r\n\r\nexport default function ComboboxVirtualizedDemo() {\r\n  const [content, setContent] = React.useState<React.ComponentRef<\r\n    typeof ComboboxContent\r\n  > | null>(null);\r\n  const [value, setValue] = React.useState(\"\");\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n  const deferredInputValue = useDeferredValue(inputValue);\r\n\r\n  const filteredTricks = React.useMemo(() => {\r\n    if (!deferredInputValue) return items;\r\n    const normalized = deferredInputValue.toLowerCase();\r\n    return items.filter((item) =>\r\n      item.label.toLowerCase().includes(normalized),\r\n    );\r\n  }, [deferredInputValue]);\r\n\r\n  const virtualizer = useVirtualizer({\r\n    count: filteredTricks.length,\r\n    getScrollElement: () => content,\r\n    estimateSize: () => 32,\r\n    overscan: 20,\r\n  });\r\n\r\n  const onInputValueChange = React.useCallback(\r\n    (value: string) => {\r\n      setInputValue(value);\r\n      if (content) {\r\n        content.scrollTop = 0; // Reset scroll position\r\n        virtualizer.measure();\r\n      }\r\n    },\r\n    [content, virtualizer],\r\n  );\r\n\r\n  // Re-measure virtualizer when filteredItems changes\r\n  React.useEffect(() => {\r\n    if (content) {\r\n      virtualizer.measure();\r\n    }\r\n  }, [content, virtualizer]);\r\n\r\n  return (\r\n    <Combobox\r\n      value={value}\r\n      onValueChange={setValue}\r\n      inputValue={inputValue}\r\n      onInputValueChange={onInputValueChange}\r\n      manualFiltering\r\n    >\r\n      <ComboboxLabel>Trick</ComboboxLabel>\r\n      <ComboboxAnchor>\r\n        <ComboboxInput placeholder=\"Search tricks...\" />\r\n        <ComboboxTrigger>\r\n          <ChevronDown className=\"h-4 w-4\" />\r\n        </ComboboxTrigger>\r\n      </ComboboxAnchor>\r\n      <ComboboxContent\r\n        ref={(node) => setContent(node)}\r\n        className=\"relative max-h-[300px] overflow-y-auto overflow-x-hidden\"\r\n      >\r\n        <ComboboxEmpty>No tricks found.</ComboboxEmpty>\r\n        <div\r\n          className=\"relative w-full\"\r\n          style={{\r\n            height: `${virtualizer.getTotalSize()}px`,\r\n          }}\r\n        >\r\n          {virtualizer.getVirtualItems().map((virtualItem) => {\r\n            const trick = filteredTricks[virtualItem.index];\r\n            if (!trick) return null;\r\n\r\n            return (\r\n              <ComboboxItem\r\n                key={virtualItem.key}\r\n                value={trick.value}\r\n                indicatorSide=\"right\"\r\n                className=\"absolute top-0 left-0 w-full\"\r\n                style={{\r\n                  height: `${virtualItem.size}px`,\r\n                  transform: `translateY(${virtualItem.start}px)`,\r\n                }}\r\n              >\r\n                {trick.label}\r\n              </ComboboxItem>\r\n            );\r\n          })}\r\n        </div>\r\n      </ComboboxContent>\r\n    </Combobox>\r\n  );\r\n}\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}