{
  "name": "combobox-virtualized-demo",
  "type": "registry:example",
  "dependencies": [
    "@diceui/combobox",
    "@tanstack/react-virtual",
    "lucide-react"
  ],
  "registryDependencies": [
    "combobox"
  ],
  "files": [
    {
      "path": "example/combobox-virtualized-demo.tsx",
      "content": "\"use client\";\n\nimport {\n  Combobox,\n  ComboboxAnchor,\n  ComboboxContent,\n  ComboboxEmpty,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxLabel,\n  ComboboxTrigger,\n} from \"@/registry/default/ui/combobox\";\nimport { useVirtualizer } from \"@tanstack/react-virtual\";\nimport { ChevronDown } from \"lucide-react\";\nimport * as React from \"react\";\nimport { useDeferredValue } from \"react\";\n\nconst tricks = Array.from({ length: 10000 }, (_, i) => ({\n  label: `Trick ${i + 1}`,\n  value: `trick-${i + 1}`,\n}));\n\nexport default function ComboboxVirtualizedDemo() {\n  const [container, setContainer] = React.useState<HTMLDivElement | null>(null);\n  const [value, setValue] = React.useState(\"\");\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const deferredInputValue = useDeferredValue(inputValue);\n\n  const filteredTricks = React.useMemo(() => {\n    if (!deferredInputValue) return tricks;\n    const normalized = deferredInputValue.toLowerCase();\n    return tricks.filter((trick) =>\n      trick.label.toLowerCase().includes(normalized),\n    );\n  }, [deferredInputValue]);\n\n  const virtualizer = useVirtualizer({\n    count: filteredTricks.length,\n    getScrollElement: () => container,\n    estimateSize: () => 36,\n    overscan: 20,\n  });\n\n  const onInputValueChange = React.useCallback(\n    (value: string) => {\n      setInputValue(value);\n      if (container) {\n        container.scrollTop = 0; // Reset scroll position\n        virtualizer.measure();\n      }\n    },\n    [container, virtualizer],\n  );\n\n  // Re-measure virtualizer when filteredTricks changes\n  React.useEffect(() => {\n    if (container) {\n      virtualizer.measure();\n    }\n  }, [container, virtualizer]);\n\n  return (\n    <Combobox\n      value={value}\n      onValueChange={setValue}\n      inputValue={inputValue}\n      onInputValueChange={onInputValueChange}\n      manualFiltering\n    >\n      <ComboboxLabel>\n        Trick ({filteredTricks.length.toLocaleString()})\n      </ComboboxLabel>\n      <ComboboxAnchor>\n        <ComboboxInput placeholder=\"Search tricks...\" />\n        <ComboboxTrigger>\n          <ChevronDown className=\"h-4 w-4\" />\n        </ComboboxTrigger>\n      </ComboboxAnchor>\n      <ComboboxContent>\n        <div\n          ref={setContainer}\n          className=\"relative max-h-[300px] overflow-y-auto overflow-x-hidden\"\n        >\n          {filteredTricks.length > 0 ? (\n            <div\n              className=\"relative w-full\"\n              style={{\n                height: `${virtualizer.getTotalSize()}px`,\n              }}\n            >\n              {virtualizer.getVirtualItems().map((virtualItem) => {\n                const trick = filteredTricks[virtualItem.index];\n                if (!trick) return null;\n\n                return (\n                  <ComboboxItem\n                    key={virtualItem.key}\n                    value={trick.value}\n                    indicatorSide=\"right\"\n                    className=\"absolute top-0 left-0 w-full\"\n                    style={{\n                      height: `${virtualItem.size}px`,\n                      transform: `translateY(${virtualItem.start}px)`,\n                    }}\n                  >\n                    {trick.label}\n                  </ComboboxItem>\n                );\n              })}\n            </div>\n          ) : (\n            <ComboboxEmpty>No items found.</ComboboxEmpty>\n          )}\n        </div>\n      </ComboboxContent>\n    </Combobox>\n  );\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}